name: Pull Request Build, Test, Install and Increment Version if Push on Master

on:
  push:
    branches:
      - master

jobs:
  build-test-install:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v2

      - id: set-up-jdk
        name: Set up JDK
        uses: actions/setup-java@v4.0.0
        with:
          java-version: "17"
          distribution: "adopt"
          cache: "maven"

      - id: mvn-verify
        if: success()
        name: Check if build is successful
        run: mvn verify

      - id: mvn-clean-install
        if: success()
        name: Build with Maven
        run: mvn clean install

  increase-version:
    if: github.actor != 'hajjoujti-bot' && github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs:
      - build-test-install
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v2

      - id: set-up-jdk
        name: Set up JDK
        uses: actions/setup-java@v4.0.0
        with:
          java-version: "17"
          distribution: "adopt"
          cache: "maven"

      - id: import-gpg
        name: Import GPG
        uses: crazy-max/ghaction-import-gpg@v6.0.0
        with:
          gpg_private_key: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
          passphrase: ${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - id: increment-version
        name: Determine Version and Increments it
        if: success()
        run: |
          # get the last commit message
          commit_message=$(git log -1 --pretty=%B)
          echo "Commit message: '$commit_message'"

          # Check if the commit message starts with the specified word
          if [[ $commit_message == "major:"* ]]; then
            mvn build-helper:parse-version \
            versions:set \
            -DnewVersion=\${parsedVersion.nextMajorVersion}.0.0 \
            versions:commit
          elif [[ $commit_message == "feat:"* ]]; then
            mvn build-helper:parse-version \
            versions:set \
            -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0 \
            versions:commit
          elif [[ $commit_message == "fix:"* ]]; then
            mvn build-helper:parse-version \
            versions:set \
            -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} \
            versions:commit
          else
            echo "Commit message does not start with either 'feat:', 'fix:' or 'major:'"
            exit 1
          fi

      - id: set-up-git-user
        if: success()
        name: Set up Git user
        run: |
          git config --global user.name "hajjoujti-bot"
          git config --global user.email "bot@hajj.mozmail.com"

      - id: commit-changes
        if: success()
        name: Commit Changes
        run: |
          # Get the project version
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          # Sign and commit with the version in the commit message
          git config --global user.signingkey ${{ secrets.OSSRH_GPG_KEY }}
          git commit -S -am "v$VERSION"

      - id: push-changes
        if: success()
        name: Push to protected branch
        uses: CasperWA/push-protected@v2
        with:
          token: ${{ secrets.PUSH_TO_PROTECTED_BRANCH }}
          branch: master
          unprotect_reviews: true

      - id: upload-build-artifact
        name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: Package
          path: staging
